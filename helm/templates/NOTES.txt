Thank you for installing {{ .Chart.Name }}.

Your release is named {{ .Release.Name }}.

{{- if .Values.backend.enabled }}
1. Backend API:
   {{- if .Values.backend.ingress.enabled }}
   {{- range $host := .Values.backend.ingress.hosts }}
     {{- range .paths }}
     http{{ if $.Values.backend.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
     {{- end }}
   {{- end }}
   {{- else if contains "NodePort" .Values.backend.service.type }}
     export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "calendo.backend.fullname" . }})
     export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
     echo http://$NODE_IP:$NODE_PORT
   {{- else if contains "LoadBalancer" .Values.backend.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "calendo.backend.fullname" . }}'
     export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "calendo.backend.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
     echo http://$SERVICE_IP:{{ .Values.backend.service.port }}
   {{- else if contains "ClusterIP" .Values.backend.service.type }}
     export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "calendo.backend.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=backend" -o jsonpath="{.items[0].metadata.name}")
     export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
     echo "Visit http://127.0.0.1:8080 to use the backend API"
     kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
   {{- end }}
{{- end }}

{{- if .Values.frontend.enabled }}
2. Frontend Application:
   {{- if .Values.frontend.ingress.enabled }}
   {{- range $host := .Values.frontend.ingress.hosts }}
     {{- range .paths }}
     http{{ if $.Values.frontend.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
     {{- end }}
   {{- end }}
   {{- else if contains "NodePort" .Values.frontend.service.type }}
     export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "calendo.frontend.fullname" . }})
     export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
     echo http://$NODE_IP:$NODE_PORT
   {{- else if contains "LoadBalancer" .Values.frontend.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "calendo.frontend.fullname" . }}'
     export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "calendo.frontend.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
     echo http://$SERVICE_IP:{{ .Values.frontend.service.port }}
   {{- else if contains "ClusterIP" .Values.frontend.service.type }}
     export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "calendo.frontend.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=frontend" -o jsonpath="{.items[0].metadata.name}")
     export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
     echo "Visit http://127.0.0.1:8080 to use the frontend application"
     kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
   {{- end }}
   Frontend component is deployed but not yet configured. Frontend access details will be provided here when implemented.
{{- end }}

{{- if .Values.cnpg.enabled }}
3. Database connection details (CloudNativePG):
   PostgreSQL Cluster: {{ .Values.cnpg.cluster.name }}
   PostgreSQL Host (Read/Write): {{ .Values.cnpg.cluster.name }}-rw
   PostgreSQL Host (Read Only): {{ .Values.cnpg.cluster.name }}-ro
   PostgreSQL Port: 5432
   PostgreSQL User: {{ .Values.cnpg.database.owner }}
   PostgreSQL Password: kubectl get secret --namespace {{ .Release.Namespace }} {{ .Values.cnpg.database.secret }} -o jsonpath="{.data.password}" | base64 --decode
   PostgreSQL Database: {{ .Values.cnpg.database.name }}
   
   To check cluster status:
     kubectl get cluster {{ .Values.cnpg.cluster.name }}
   
   To get cluster details:
     kubectl describe cluster {{ .Values.cnpg.cluster.name }}
{{- else if .Values.postgresql.enabled }}
3. Database connection details:
   PostgreSQL Host: {{ .Release.Name }}-postgresql
   PostgreSQL Port: 5432
   PostgreSQL User: {{ .Values.postgresql.auth.username }}
   PostgreSQL Password: kubectl get secret --namespace {{ .Release.Namespace }} {{ .Release.Name }}-postgresql -o jsonpath="{.data.postgres-password}" | base64 --decode
   PostgreSQL Database: {{ .Values.postgresql.auth.database }}
{{- end }}

{{- if .Values.icalImporter.enabled }}
4. iCal Importer (Calendar Synchronization):
   CronJob Schedule: {{ .Values.icalImporter.cronjob.schedule }}
   
   To check the status:
     kubectl get cronjobs {{ include "calendo.icalimporter.fullname" . }}
   
   To view recent job logs:
     kubectl logs -l app.kubernetes.io/component=ical-importer --tail=50
   
   To manually trigger a sync:
     kubectl create job --from=cronjob/{{ include "calendo.icalimporter.fullname" . }} manual-sync-$(date +%s)
   
   Calendar sync configuration is stored in ConfigMap: {{ include "calendo.icalimporter.fullname" . }}
{{- end }}

===================================================================

GETTING STARTED:

1. Wait for all pods to be ready:
   kubectl get pods -l app.kubernetes.io/instance={{ .Release.Name }}

2. Check the backend API health:
   kubectl port-forward service/{{ include "calendo.backend.fullname" . }} 8080:8080
   curl http://localhost:8080/api/health

3. Monitor calendar synchronization:
   kubectl logs -f -l app.kubernetes.io/component=ical-importer

For more detailed documentation, see:
- Backend API: /swagger endpoint
- iCal Importer: helm/ICAL_IMPORTER_README.md
