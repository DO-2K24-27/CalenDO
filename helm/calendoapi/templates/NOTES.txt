Thank you for installing {{ .Chart.Name }}.

Your release is named {{ .Release.Name }}.

{{- if .Values.backend.enabled }}
1. Backend API:
   {{- if .Values.backend.ingress.enabled }}
   {{- range $host := .Values.backend.ingress.hosts }}
     {{- range .paths }}
     http{{ if $.Values.backend.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
     {{- end }}
   {{- end }}
   {{- else if contains "NodePort" .Values.backend.service.type }}
     export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "calendoapi.fullname" . }}-backend)
     export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
     echo http://$NODE_IP:$NODE_PORT
   {{- else if contains "LoadBalancer" .Values.backend.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "calendoapi.fullname" . }}-backend'
     export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "calendoapi.fullname" . }}-backend --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
     echo http://$SERVICE_IP:{{ .Values.backend.service.port }}
   {{- else if contains "ClusterIP" .Values.backend.service.type }}
     export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "calendoapi.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=backend" -o jsonpath="{.items[0].metadata.name}")
     export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
     echo "Visit http://127.0.0.1:8080 to use the backend API"
     kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
   {{- end }}
{{- end }}

{{- if .Values.frontend.enabled }}
2. Frontend Application:
   Frontend component is deployed but not yet configured. Frontend access details will be provided here when implemented.
{{- end }}

{{- if .Values.postgresql.enabled }}
3. Database connection details:
   PostgreSQL Host: {{ .Release.Name }}-postgresql
   PostgreSQL Port: 5432
   PostgreSQL User: {{ .Values.postgresql.auth.username }}
   PostgreSQL Password: kubectl get secret --namespace {{ .Release.Namespace }} {{ .Release.Name }}-postgresql -o jsonpath="{.data.postgres-password}" | base64 --decode
   PostgreSQL Database: {{ .Values.postgresql.auth.database }}
{{- end }}
