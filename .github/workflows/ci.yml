name: CalenDO CI

on:
  push:
    branches: [ main ]

jobs:
  # Detect changes in each project
  detect-changes:
    runs-on: github-runner-do
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      ical-importer-changed: ${{ steps.changes.outputs.ical-importer }}
      image-generator-changed: ${{ steps.changes.outputs.image-generator }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            ical-importer:
              - 'ical-importer/**'
            image-generator:
              - 'image-generator/**'

  build-and-test-backend:
    needs: detect-changes
    runs-on: github-runner-do
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Build
        working-directory: ./backend
        run: go build -v ./...

      - name: Test
        working-directory: ./backend
        run: go test -v ./...

      - name: Generate Swagger docs
        working-directory: ./backend
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          swag init -g api/main.go -o docs

  build-and-test-ical-importer:
    needs: detect-changes
    runs-on: github-runner-do
    if: needs.detect-changes.outputs.ical-importer-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Install dependencies
        working-directory: ./ical-importer
        run: go mod download

      - name: Build
        working-directory: ./ical-importer
        run: go build -v

      - name: Test
        working-directory: ./ical-importer
        run: go test -v ./...
  
  build-and-test-frontend:
    needs: detect-changes
    runs-on: github-runner-do
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint
        working-directory: ./frontend
        run: npm run lint

      - name: Build
        working-directory: ./frontend
        run: npm run build

  build-and-test-image-generator:
    needs: detect-changes
    runs-on: github-runner-do
    if: needs.detect-changes.outputs.image-generator-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: ./image-generator
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        working-directory: ./image-generator
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  docker-backend:
    needs: [detect-changes, build-and-test-backend]
    runs-on: github-runner-do
    if: always() && !cancelled() && !failure()
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Build and push new image if there are changes
      - name: Build and push Backend Docker image
        if: needs.detect-changes.outputs.backend-changed == 'true' && (needs.build-and-test-backend.result == 'success' || needs.build-and-test-backend.result == 'skipped')
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ vars.REGISTRY_URL }}/calendo-backend:${{ github.sha }}
            ${{ vars.REGISTRY_URL }}/calendo-backend:latest

      # Just tag existing latest image with current commit SHA if no changes
      - name: Tag existing Backend Docker image
        if: needs.detect-changes.outputs.backend-changed == 'false'
        run: |
          # Pull latest image
          docker pull ${{ vars.REGISTRY_URL }}/calendo-backend:latest
          # Tag it with current commit SHA
          docker tag ${{ vars.REGISTRY_URL }}/calendo-backend:latest ${{ vars.REGISTRY_URL }}/calendo-backend:${{ github.sha }}
          # Push the new tag
          docker push ${{ vars.REGISTRY_URL }}/calendo-backend:${{ github.sha }}

      - name: Keyless signing of Backend Docker image
        run: |
          export COSIGN_EXPERIMENTAL=1
          cosign sign -y ${{ vars.REGISTRY_URL }}/calendo-backend:${{ github.sha }}
          if [ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]; then
            cosign sign -y ${{ vars.REGISTRY_URL }}/calendo-backend:latest
          fi

  docker-ical-importer:
    needs: [detect-changes, build-and-test-ical-importer]
    runs-on: github-runner-do
    if: always() && !cancelled() && !failure()
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Build and push new image if there are changes
      - name: Build and push iCal Importer Docker image
        if: needs.detect-changes.outputs.ical-importer-changed == 'true' && (needs.build-and-test-ical-importer.result == 'success' || needs.build-and-test-ical-importer.result == 'skipped')
        uses: docker/build-push-action@v5
        with:
          context: ./ical-importer
          push: true
          tags: |
            ${{ vars.REGISTRY_URL }}/calendo-ical-importer:${{ github.sha }}
            ${{ vars.REGISTRY_URL }}/calendo-ical-importer:latest

      # Just tag existing latest image with current commit SHA if no changes
      - name: Tag existing iCal Importer Docker image
        if: needs.detect-changes.outputs.ical-importer-changed == 'false'
        run: |
          # Pull latest image
          docker pull ${{ vars.REGISTRY_URL }}/calendo-ical-importer:latest
          # Tag it with current commit SHA
          docker tag ${{ vars.REGISTRY_URL }}/calendo-ical-importer:latest ${{ vars.REGISTRY_URL }}/calendo-ical-importer:${{ github.sha }}
          # Push the new tag
          docker push ${{ vars.REGISTRY_URL }}/calendo-ical-importer:${{ github.sha }}

      - name: Keyless signing of iCal Importer Docker image
        run: |
          export COSIGN_EXPERIMENTAL=1
          cosign sign -y ${{ vars.REGISTRY_URL }}/calendo-ical-importer:${{ github.sha }}
          if [ "${{ needs.detect-changes.outputs.ical-importer-changed }}" == "true" ]; then
            cosign sign -y ${{ vars.REGISTRY_URL }}/calendo-ical-importer:latest
          fi

  docker-frontend:
    needs: [detect-changes, build-and-test-frontend]
    runs-on: github-runner-do
    if: always() && !cancelled() && !failure()
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Build and push new image if there are changes
      - name: Build and push Frontend Docker image
        if: needs.detect-changes.outputs.frontend-changed == 'true' && (needs.build-and-test-frontend.result == 'success' || needs.build-and-test-frontend.result == 'skipped')
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ vars.REGISTRY_URL }}/calendo-frontend:${{ github.sha }}
            ${{ vars.REGISTRY_URL }}/calendo-frontend:latest

      # Just tag existing latest image with current commit SHA if no changes
      - name: Tag existing Frontend Docker image
        if: needs.detect-changes.outputs.frontend-changed == 'false'
        run: |
          # Pull latest image
          docker pull ${{ vars.REGISTRY_URL }}/calendo-frontend:latest
          # Tag it with current commit SHA
          docker tag ${{ vars.REGISTRY_URL }}/calendo-frontend:latest ${{ vars.REGISTRY_URL }}/calendo-frontend:${{ github.sha }}
          # Push the new tag
          docker push ${{ vars.REGISTRY_URL }}/calendo-frontend:${{ github.sha }}

      - name: Keyless signing of Frontend Docker image
        run: |
          export COSIGN_EXPERIMENTAL=1
          cosign sign -y ${{ vars.REGISTRY_URL }}/calendo-frontend:${{ github.sha }}
          if [ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]; then
            cosign sign -y ${{ vars.REGISTRY_URL }}/calendo-frontend:latest
          fi

  docker-image-generator:
    needs: [detect-changes, build-and-test-image-generator]
    runs-on: github-runner-do
    if: always() && !cancelled() && !failure()
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Build and push new image if there are changes
      - name: Build and push Image Generator Docker image
        if: needs.detect-changes.outputs.image-generator-changed == 'true' && (needs.build-and-test-image-generator.result == 'success' || needs.build-and-test-image-generator.result == 'skipped')
        uses: docker/build-push-action@v5
        with:
          context: ./image-generator
          push: true
          tags: |
            ${{ vars.REGISTRY_URL }}/calendo-image-generator:${{ github.sha }}
            ${{ vars.REGISTRY_URL }}/calendo-image-generator:latest

      # Just tag existing latest image with current commit SHA if no changes
      - name: Tag existing Image Generator Docker image
        if: needs.detect-changes.outputs.image-generator-changed == 'false'
        run: |
          # Pull latest image
          docker pull ${{ vars.REGISTRY_URL }}/calendo-image-generator:latest
          # Tag it with current commit SHA
          docker tag ${{ vars.REGISTRY_URL }}/calendo-image-generator:latest ${{ vars.REGISTRY_URL }}/calendo-image-generator:${{ github.sha }}
          # Push the new tag
          docker push ${{ vars.REGISTRY_URL }}/calendo-image-generator:${{ github.sha }}

      - name: Keyless signing of Image Generator Docker image
        run: |
          export COSIGN_EXPERIMENTAL=1
          cosign sign -y ${{ vars.REGISTRY_URL }}/calendo-image-generator:${{ github.sha }}
          if [ "${{ needs.detect-changes.outputs.image-generator-changed }}" == "true" ]; then
            cosign sign -y ${{ vars.REGISTRY_URL }}/calendo-image-generator:latest
          fi

  deploy:
    needs: [docker-backend, docker-frontend, docker-ical-importer, docker-image-generator]
    if: always() && !cancelled() && !failure()
    runs-on: github-runner-do
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      
      - name: Configure Kubernetes
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      
      - name: Deploy to Kubernetes with Helm
        run: |
          helm dependency build ./helm
          helm upgrade --install calendo ./helm \
            --set backend.image.repository=${{ vars.REGISTRY_URL }}/calendo-backend \
            --set backend.image.tag=${{ github.sha }} \
            --set backend.image.pullPolicy=IfNotPresent \
            --set frontend.image.repository=${{ vars.REGISTRY_URL }}/calendo-frontend \
            --set frontend.image.tag=${{ github.sha }} \
            --set frontend.image.pullPolicy=IfNotPresent \
            --set icalImporter.image.repository=${{ vars.REGISTRY_URL }}/calendo-ical-importer \
            --set icalImporter.image.tag=${{ github.sha }} \
            --set icalImporter.image.pullPolicy=IfNotPresent \
            --set imageGenerator.image.repository=${{ vars.REGISTRY_URL }}/calendo-image-generator \
            --set imageGenerator.image.tag=${{ github.sha }} \
            --set imageGenerator.image.pullPolicy=IfNotPresent \
            --namespace hugo-calendo --create-namespace \
            --wait --timeout 15m
